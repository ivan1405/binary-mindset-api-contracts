/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.binary.mindset.contracts;

import com.binary.mindset.contracts.model.Project;
import com.binary.mindset.contracts.model.Task;
import com.binary.mindset.contracts.model.TaskInformation;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-03-07T16:00:33.009+01:00[Europe/Paris]")

@Validated
@Api(value = "projects", description = "the projects API")
public interface ProjectsApi {

    default ProjectsApiDelegate getDelegate() {
        return new ProjectsApiDelegate() {};
    }

    /**
     * POST /projects : Creates a new project
     *
     * @param project Information about the project which will be created (required)
     * @return Project created successfully (status code 201)
     */
    @ApiOperation(value = "Creates a new project", nickname = "createProject", notes = "", response = Project.class, tags={ "Projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Project created successfully", response = Project.class) })
    @RequestMapping(value = "/projects",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Project> createProject(@ApiParam(value = "Information about the project which will be created" ,required=true )  @Valid @RequestBody Project project) {
        return getDelegate().createProject(project);
    }


    /**
     * DELETE /projects/{project-id} : Deletes a specific project
     *
     * @param projectId Id of the project to delete (required)
     * @return Project deleted successfully (status code 200)
     */
    @ApiOperation(value = "Deletes a specific project", nickname = "deleteProject", notes = "", tags={ "Projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Project deleted successfully") })
    @RequestMapping(value = "/projects/{project-id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteProject(@ApiParam(value = "Id of the project to delete",required=true) @PathVariable("project-id") Integer projectId) {
        return getDelegate().deleteProject(projectId);
    }


    /**
     * DELETE /projects/{project-id}/tasks/{task-id} : Deletes a specific task
     *
     * @param projectId Id of the project to request (required)
     * @param taskId Id of the task to delete (required)
     * @return Task deleted successfully (status code 200)
     */
    @ApiOperation(value = "Deletes a specific task", nickname = "deleteTask", notes = "", tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Task deleted successfully") })
    @RequestMapping(value = "/projects/{project-id}/tasks/{task-id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTask(@ApiParam(value = "Id of the project to request",required=true) @PathVariable("project-id") Integer projectId,@ApiParam(value = "Id of the task to delete",required=true) @PathVariable("task-id") Integer taskId) {
        return getDelegate().deleteTask(projectId, taskId);
    }


    /**
     * GET /projects/{project-id} : Returns a specific project
     *
     * @param projectId Id of the project to request (required)
     * @return Project found successfully (status code 200)
     */
    @ApiOperation(value = "Returns a specific project", nickname = "getProject", notes = "", response = Project.class, tags={ "Projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Project found successfully", response = Project.class) })
    @RequestMapping(value = "/projects/{project-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Project> getProject(@ApiParam(value = "Id of the project to request",required=true) @PathVariable("project-id") Integer projectId) {
        return getDelegate().getProject(projectId);
    }


    /**
     * GET /projects : Returns the list of existing projects
     *
     * @return List of existing projects (status code 200)
     */
    @ApiOperation(value = "Returns the list of existing projects", nickname = "getProjects", notes = "", response = Project.class, responseContainer = "List", tags={ "Projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of existing projects", response = Project.class, responseContainer = "List") })
    @RequestMapping(value = "/projects",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Project>> getProjects() {
        return getDelegate().getProjects();
    }


    /**
     * GET /projects/{project-id}/tasks/{task-id} : Returns a specific task
     *
     * @param projectId Id of the project to request (required)
     * @param taskId Id of the task to request (required)
     * @return Task found successfully (status code 200)
     */
    @ApiOperation(value = "Returns a specific task", nickname = "getTask", notes = "", response = Task.class, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Task found successfully", response = Task.class) })
    @RequestMapping(value = "/projects/{project-id}/tasks/{task-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Task> getTask(@ApiParam(value = "Id of the project to request",required=true) @PathVariable("project-id") Integer projectId,@ApiParam(value = "Id of the task to request",required=true) @PathVariable("task-id") Integer taskId) {
        return getDelegate().getTask(projectId, taskId);
    }


    /**
     * GET /projects/{project-id}/tasks : Returns the list of tasks which belong to a project
     *
     * @param projectId Id of the project to request (required)
     * @return Tasks found successfully (status code 200)
     */
    @ApiOperation(value = "Returns the list of tasks which belong to a project", nickname = "getTasks", notes = "", response = Task.class, responseContainer = "List", tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Tasks found successfully", response = Task.class, responseContainer = "List") })
    @RequestMapping(value = "/projects/{project-id}/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Task>> getTasks(@ApiParam(value = "Id of the project to request",required=true) @PathVariable("project-id") Integer projectId) {
        return getDelegate().getTasks(projectId);
    }


    /**
     * PATCH /projects/{project-id}/tasks/{task-id}/info : Modify the information of a specific task
     *
     * @param projectId Id of the project to request (required)
     * @param taskId Id of the task to modify (required)
     * @param taskInformation Information about the project which will be created (required)
     * @return Task modified successfully (status code 200)
     */
    @ApiOperation(value = "Modify the information of a specific task", nickname = "modifyTask", notes = "", response = Task.class, tags={ "Tasks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Task modified successfully", response = Task.class) })
    @RequestMapping(value = "/projects/{project-id}/tasks/{task-id}/info",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Task> modifyTask(@ApiParam(value = "Id of the project to request",required=true) @PathVariable("project-id") Integer projectId,@ApiParam(value = "Id of the task to modify",required=true) @PathVariable("task-id") Integer taskId,@ApiParam(value = "Information about the project which will be created" ,required=true )  @Valid @RequestBody TaskInformation taskInformation) {
        return getDelegate().modifyTask(projectId, taskId, taskInformation);
    }

}
